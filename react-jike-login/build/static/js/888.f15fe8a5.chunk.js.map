{"version":3,"file":"static/js/888.f15fe8a5.chunk.js","mappings":"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","sources":["apis/article.js","hooks/useChannel.js","pages/Article/index.js"],"sourcesContent":["// 封装和文章相关的接口函数\n\nimport { request } from \"@/utils\"\n\n// 1. 获取频道列表\nexport function getChannelAPI () {\n  return request({\n    url: '/channels',\n    method: 'GET'\n  })\n}\n\n// 2. 提交文章表单\n\nexport function createArticleAPI (data) {\n  return request({\n    url: '/mp/articles?draft=false',\n    method: 'POST',\n    data\n  })\n}\n\n// 更新文章表单\n\nexport function updateArticleAPI (data) {\n  return request({\n    url: `/mp/articles/${data.id}?draft=false`,\n    method: 'PUT',\n    data\n  })\n}\n\n\n// 获取文章列表\n\nexport function getArticleListAPI (params) {\n  return request({\n    url: \"/mp/articles\",\n    method: 'GET',\n    params\n  })\n}\n\n\n// 删除文章\n\nexport function delArticleAPI (id) {\n  return request({\n    url: `/mp/articles/${id}`,\n    method: 'DELETE'\n  })\n}\n\n\n// 获取文章详情\n\nexport function getArticleById (id) {\n  return request({\n    url: `/mp/articles/${id}`\n  })\n}\n\n","// 封装获取频道列表的逻辑\nimport { useState, useEffect } from 'react'\nimport { getChannelAPI } from '@/apis/article'\nfunction useChannel () {\n  // 1. 获取频道列表所有的逻辑\n  // 获取频道列表\n  const [channelList, setChannelList] = useState([])\n\n  useEffect(() => {\n    // 1. 封装函数 在函数体内调用接口\n    const getChannelList = async () => {\n      const res = await getChannelAPI()\n      setChannelList(res.data.channels)\n    }\n    // 2. 调用函数\n    getChannelList()\n  }, [])\n  // 2. 把组件中要用到的数据return出去\n  return {\n    channelList\n  }\n}\n\nexport { useChannel }","import { Link, useNavigate } from 'react-router-dom'\nimport { Card, Breadcrumb, Form, Button, Radio, DatePicker, Select, Popconfirm } from 'antd'\n// 引入汉化包 时间选择器显示中文\nimport locale from 'antd/es/date-picker/locale/zh_CN'\n\n// 导入资源\nimport { Table, Tag, Space } from 'antd'\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons'\nimport img404 from '@/assets/error.png'\nimport { useChannel } from '@/hooks/useChannel'\nimport { useEffect, useState } from 'react'\nimport { delArticleAPI, getArticleListAPI } from '@/apis/article'\n\nconst { Option } = Select\nconst { RangePicker } = DatePicker\n\nconst Article = () => {\n  const navigate = useNavigate()\n  const { channelList } = useChannel()\n  // 准备列数据\n  // 定义状态枚举\n  const status = {\n    1: <Tag color='warning'>待审核</Tag>,\n    2: <Tag color='success'>审核通过</Tag>,\n  }\n  const columns = [\n    {\n      title: '封面',\n      dataIndex: 'cover',\n      width: 120,\n      render: cover => {\n        return <img src={cover.images[0] || img404} width={80} height={60} alt=\"\" />\n      }\n    },\n    {\n      title: '标题',\n      dataIndex: 'title',\n      width: 220\n    },\n    {\n      title: '状态',\n      dataIndex: 'status',\n      // data - 后端返回的状态status 根据它做条件渲染\n      // data === 1 => 待审核\n      // data === 2 => 审核通过\n      render: data => status[data]\n    },\n    {\n      title: '发布时间',\n      dataIndex: 'pubdate'\n    },\n    {\n      title: '阅读数',\n      dataIndex: 'read_count'\n    },\n    {\n      title: '评论数',\n      dataIndex: 'comment_count'\n    },\n    {\n      title: '点赞数',\n      dataIndex: 'like_count'\n    },\n    {\n      title: '操作',\n      render: data => {\n        return (\n          <Space size=\"middle\">\n            <Button type=\"primary\" shape=\"circle\" icon={<EditOutlined />} onClick={() => navigate(`/publish?id=${data.id}`)} />\n            <Popconfirm\n              title=\"删除文章\"\n              description=\"确认要删除当前文章吗?\"\n              onConfirm={() => onConfirm(data)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                danger\n                shape=\"circle\"\n                icon={<DeleteOutlined />}\n              />\n            </Popconfirm>\n          </Space>\n        )\n      }\n    }\n  ]\n\n  // 筛选功能\n  // 1. 准备参数\n  const [reqData, setReqData] = useState({\n    status: '',\n    channel_id: '',\n    begin_pubdate: '',\n    end_pubdate: '',\n    page: 1,\n    per_page: 4\n  })\n\n\n  // 获取文章列表\n  const [list, setList] = useState([])\n  const [count, setCount] = useState(0)\n  useEffect(() => {\n    const getList = async () => {\n      const res = await getArticleListAPI(reqData)\n      setList(res.data.results)\n      setCount(res.data.total_count)\n    }\n    getList()\n  }, [reqData])\n\n\n  // 2. 获取筛选数据\n  const onFinish = (formValue) => {\n    console.log(formValue)\n    // 3. 把表单收集到数据放到参数中(不可变的方式)\n    setReqData({\n      ...reqData,\n      channel_id: formValue.channel_id,\n      status: formValue.status,\n      begin_pubdate: (formValue.date || [])[0]?.format('YYYY-MM-DD'),\n      end_pubdate: (formValue.date || [])[1]?.format('YYYY-MM-DD')\n    })\n    // 4. 重新拉取文章列表 + 渲染table逻辑重复的 - 复用\n    // reqData依赖项发生变化 重复执行副作用函数 \n  }\n\n  // 分页\n  const onPageChange = (page) => {\n    console.log(page)\n    // 修改参数依赖项 引发数据的重新获取列表渲染\n    setReqData({\n      ...reqData,\n      page\n    })\n  }\n\n  // 删除\n  const onConfirm = async (data) => {\n    console.log('删除点击了', data)\n    await delArticleAPI(data.id)\n    setReqData({\n      ...reqData\n    })\n  }\n\n  return (\n    <div>\n      <Card\n        title={\n          <Breadcrumb items={[\n            { title: <Link to={'/'}>首页</Link> },\n            { title: '文章列表' },\n          ]} />\n        }\n        style={{ marginBottom: 20 }}\n      >\n        <Form initialValues={{ status: '' }} onFinish={onFinish}>\n          <Form.Item label=\"状态\" name=\"status\">\n            <Radio.Group>\n              <Radio value={''}>全部</Radio>\n              <Radio value={1}>待审核</Radio>\n              <Radio value={2}>审核通过</Radio>\n            </Radio.Group>\n          </Form.Item>\n\n          <Form.Item label=\"频道\" name=\"channel_id\">\n            <Select\n              placeholder=\"请选择文章频道\"\n              style={{ width: 120 }}\n            >\n              {channelList.map(item => <Option key={item.id} value={item.id}>{item.name}</Option>)}\n            </Select>\n          </Form.Item>\n\n          <Form.Item label=\"日期\" name=\"date\">\n            {/* 传入locale属性 控制中文显示*/}\n            <RangePicker locale={locale}></RangePicker>\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 40 }}>\n              筛选\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n      {/* 表格区域 */}\n      <Card title={`根据筛选条件共查询到 ${count} 条结果：`}>\n        <Table rowKey=\"id\" columns={columns} dataSource={list} pagination={{\n          total: count,\n          pageSize: reqData.per_page,\n          onChange: onPageChange\n        }} />\n      </Card>\n    </div>\n  )\n}\n\nexport default Article"],"names":["getChannelAPI","request","url","method","createArticleAPI","data","updateArticleAPI","id","getArticleListAPI","params","delArticleAPI","getArticleById","useChannel","channelList","setChannelList","useState","useEffect","async","res","channels","getChannelList","Option","Select","RangePicker","DatePicker","Article","navigate","useNavigate","status","_jsx","Tag","color","children","columns","title","dataIndex","width","render","cover","src","images","height","alt","_jsxs","Space","size","Button","type","shape","icon","EditOutlined","onClick","Popconfirm","description","onConfirm","okText","cancelText","danger","DeleteOutlined","reqData","setReqData","channel_id","begin_pubdate","end_pubdate","page","per_page","list","setList","count","setCount","results","total_count","getList","console","log","Card","Breadcrumb","items","Link","to","style","marginBottom","Form","initialValues","onFinish","formValue","_","_2","date","format","Item","label","name","Radio","value","placeholder","map","item","locale","htmlType","marginLeft","Table","rowKey","dataSource","pagination","total","pageSize","onChange"],"sourceRoot":""}